import logging
import os
import stripe
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, MessageHandler, filters
import random
from datetime import datetime
from db_new import add_order, get_orders_by_user, add_user

USER_MESSAGE_DATA = {}
RANDOM_EMOJIS = ["üêπ —Ö–æ–≤—Ä–∞—à–æ–∫", "üê® –∫–æ–∞–ª–∞", "ü¶Å –ª–µ–≤–µ–Ω—è—Ç–∫–æ", "üêú –º—É—Ä–∞—à–∫–∞", "üêå —Ä–∞–≤–ª–∏–∫", "ü¶ï –¥–∏–Ω–æ–∑–∞–≤—Ä—ñ–∫", "ü¶ß –º–∞–≤–ø–µ–Ω—è", "ü¶© —Ñ–ª–∞–º—ñ–Ω–≥–æ"]
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

stripe.api_key = os.getenv("STRIPE_API_KEY")

async def send_welcome(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = "üëã *–í—ñ—Ç–∞—î–º–æ –≤ —Å–µ—Ä–≤—ñ—Å—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±–æ—Ç—ñ–≤!*\n\n"
    message += "üîπ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø—Ä–æ –ø–æ—Å–ª—É–≥–∏ —Ç–∞ —Ä–æ–∑—Ü—ñ–Ω–∫–∏."
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=get_main_menu())

def get_main_menu():
    keyboard = [
        ["üìå –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", "üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
        ["üõí –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"],
        ["–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º ‚öôÔ∏è"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìå –ü—Ä–∞–π—Å-–ª–∏—Å—Ç":
        price_list = (
            "üìå **–ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–∞ —Ä–æ–∑—Ä–æ–±–∫—É Telegram-–±–æ—Ç—ñ–≤**\n\n"
            "üèÜ **–ë–∞–∑–æ–≤—ñ –±–æ—Ç–∏ (–ø—Ä–æ—Å—Ç–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª, —à–≤–∏–¥–∫–∞ —Ä–µ–∞–ª—ñ–∑–∞—Ü—ñ—è)**\n"
            "‚úÖ –ë–æ—Ç-–∞–≤—Ç–æ–≤—ñ–¥–ø–æ–≤—ñ–¥–∞—á ‚Äì **50$**\n"
            "‚úÖ –ë–æ—Ç –¥–ª—è —Ä–æ–∑—Å–∏–ª–æ–∫ ‚Äì **70$**\n"
            "‚úÖ –ë–æ—Ç –¥–ª—è –∑–±–æ—Ä—É –∑–∞—è–≤–æ–∫/–∞–Ω–∫–µ—Ç ‚Äì **80$**\n"
            "üõí –ë–æ—Ç–∏ –¥–ª—è –±—ñ–∑–Ω–µ—Å—É (–ø—Ä–æ–¥–∞–∂—ñ, –ø–ª–∞—Ç–µ–∂—ñ, –∑–∞–ø–∏—Å–∏)\n"
            "‚úÖ –ë–æ—Ç-–º–∞–≥–∞–∑–∏–Ω ‚Äì **150$**\n"
            "‚úÖ –ë–æ—Ç –¥–ª—è –æ–ø–ª–∞—Ç ‚Äì **120$**\n"
            "‚úÖ –ë–æ—Ç-–±—Ä–æ–Ω—é–≤–∞–ª—å–Ω–∏–∫ ‚Äì **130$**\n"
            "üîç –ë–æ—Ç–∏ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–∏–º–∏ –º–æ–∂–ª–∏–≤–æ—Å—Ç—è–º–∏ (–∞–Ω–∞–ª—ñ—Ç–∏–∫–∞, AI, —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó)\n"
            "‚úÖ –ë–æ—Ç-–∞–Ω–∞–ª—ñ—Ç–∏–∫ ‚Äì **200$**\n"
            "‚úÖ –ë–æ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É ‚Äì **250$**\n"
            "‚úÖ AI-–±–æ—Ç ‚Äì **300$**\n"
            "‚öôÔ∏è –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ñ—É–Ω–∫—Ü—ñ—ó (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)\n"
            "üß† –î–æ–¥–∞–≤–∞–Ω–Ω—è AI ‚Äì **+200$**\n"
            "üì¢ –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ –∫—ñ–ª—å–∫–æ–º–∞ –∫–∞–Ω–∞–ª–∞–º–∏ ‚Äì **+100$**\n"
            "üåç –ë–∞–≥–∞—Ç–æ–º–æ–≤–Ω—ñ—Å—Ç—å ‚Äì **+150$**\n"
            "üîÑ –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ CRM –∞–±–æ Google Sheets ‚Äì **+70$**\n"
            "üìå –•–æ—Å—Ç–∏–Ω–≥ —Ç–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –±–æ—Ç–∞ ‚Äì –≤—ñ–¥ **10$** –º—ñ—Å—è—Ü—å\n"
            "üìå –î–æ–æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É ‚Äì **–¥–æ–≥–æ–≤—ñ—Ä–Ω–∞ —Ü—ñ–Ω–∞**\n\n"
            "üöÄ –ì–æ—Ç–æ–≤–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –±–æ—Ç–∞ –ø—ñ–¥ —Ç–≤—ñ–π –∑–∞–ø–∏—Ç! –ù–∞–ø–∏—à–∏ –≤ –ø—Ä–∏–≤–∞—Ç, —â–æ–± –æ–±–≥–æ–≤–æ—Ä–∏—Ç–∏ –¥–µ—Ç–∞–ª—ñ."
        )
        await update.message.reply_text(price_list, parse_mode="Markdown")
    elif text == "üìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        instruction = (
            "üìã **–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è**\n"
            "üñåÔ∏è **–ù–∞–ø–∏—à—ñ—Ç—å** —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—É @dcprn\n"
            "‚ñ™Ô∏è –ü—ñ—Å–ª—è —É–∑–≥–æ–¥–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π –≤–∏–±–µ—Ä—ñ—Ç—å: ¬´üõí **–û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è**¬ª\n"
            "‚ñ™Ô∏è –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É\n"
            "‚ñ™Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´**–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç—É üìë**¬ª\n"
            "‚ñ™Ô∏è –í–≤–µ–¥—ñ—Ç—å —É–∑–≥–æ–¥–∂–µ–Ω—É —Å—É–º—É –æ–ø–ª–∞—Ç–∏ –≤ **$**\n"
            "‚ñ™Ô∏è –ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫—É —É–º–æ–≤—É\n"
            "‚ñ™Ô∏è –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É ¬´**–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é** üëç¬ª\n"
            "‚ñ™Ô∏è –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ 2 –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ –ø–µ—Ä—à–æ—ó —á–∞—Å—Ç–∏–Ω–∏ —ñ –¥—Ä—É–≥–æ—ó\n"
            "‚ñ™Ô∏è –û–ø–ª–∞—Ç—ñ—Ç—å –ø–µ—Ä—à—É —á–∞—Å—Ç–∏–Ω—É –æ–¥—Ä–∞–∑—É —ñ –¥—Ä—É–≥—É –ø–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—é –ø—Ä–æ—î–∫—Ç–∞ ü¶∏üèª‚Äç‚ôÇÔ∏è"
        )
        await update.message.reply_text(instruction, parse_mode="Markdown")
    elif text == "üõí –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è":
        button = KeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è", request_contact=True)
        keyboard = [[button]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –≤–∞—à–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.", reply_markup=reply_markup)
    elif text == "–ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º ‚öôÔ∏è":
        await update.message.reply_text("–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è @dcprn")

async def handle_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if contact:
        user_id = update.effective_user.id
        username = update.effective_user.username or update.effective_user.first_name
        context.user_data['phone'] = contact.phone_number
        
        logger.info(f"–î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: ID={contact.user_id}, –Ü–º'—è={username}, –¢–µ–ª–µ—Ñ–æ–Ω={contact.phone_number}")
        add_user(contact.user_id, username, contact.phone_number)
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: ID={contact.user_id}, –Ü–º'—è={username}, –¢–µ–ª–µ—Ñ–æ–Ω={contact.phone_number}")
        
        await update.message.reply_text(f"–í—ñ—Ç–∞—î–º–æ‚ú® –≤–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—å –≤ —Å–∏—Å—Ç–µ–º—ñ —è–∫ –ø—Ä–∞—Ü—å–æ–≤–∏—Ç–∏–π {RANDOM_EMOJIS[random.randint(0, len(RANDOM_EMOJIS) - 1)]}")
        
        keyboard = [["–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç—É üìë"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç—É.", reply_markup=reply_markup)

async def handle_form_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['currency'] = "USD"
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –æ–ø–ª–∞—Ç–∏:")

async def handle_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = update.message.text
    context.user_data['amount'] = amount

    user_phone = context.user_data.get('phone')
    currency = context.user_data.get('currency')

    contract_text = f"""
‚öôÔ∏è**–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å**: [+48727842737]

üëΩ**–ó–∞–º–æ–≤–Ω–∏–∫**: [{user_phone}]

‚öôÔ∏è**–†–æ–∑—Ä–æ–±–∫–∞ –±–æ—Ç–∞/–ø–∑**

üí∞**–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –æ–ø–ª–∞—Ç–∏** {amount} {currency}

üí∞**–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞ 50%** {float(amount) * 0.5} {currency}

üî∫*–Ø–∫—â–æ –ó–∞–º–æ–≤–Ω–∏–∫ –≤—ñ–¥–º–æ–≤–ª—è—î—Ç—å—Å—è –≤—ñ–¥ –ø—Ä–æ—î–∫—Ç—É –ø—ñ—Å–ª—è —Å—Ç–∞—Ä—Ç—É —Ä–æ–±–æ—Ç–∏, –ø–µ—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–≤–µ—Ä—Ç–∞—î—Ç—å—Å—è.*

üî∫*–£—Å—ñ –¥–∞–Ω—ñ –ó–∞–º–æ–≤–Ω–∏–∫–∞ —Ç–∞ –¢–ó –≤–≤–∞–∂–∞—é—Ç—å—Å—è –∫–æ–Ω—Ñ—ñ–¥–µ–Ω—Ü—ñ–π–Ω–∏–º–∏ —ñ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—å—Å—è —Ç—Ä–µ—Ç—ñ–º –æ—Å–æ–±–∞–º.*

**–î–∞—Ç–∞**: {datetime.now().strftime('%Y-%m-%d')}

**–ù–æ–º–µ—Ä —É–≥–æ–¥–∏** {user_phone}{datetime.now().strftime('%Y%m%d')}
"""
    await update.message.reply_text(contract_text, parse_mode="Markdown")

    keyboard = [["–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é üëç", "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å üò™"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç.", reply_markup=reply_markup)

def create_payment_link(amount, description):
    success_url = os.getenv("SUCCESS_URL")
    cancel_url = os.getenv("CANCEL_URL")

    if not success_url or not cancel_url:
        raise ValueError("SUCCESS_URL —ñ CANCEL_URL –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

    session = stripe.checkout.Session.create(
        payment_method_types=['card'],
        line_items=[{
            'price_data': {
                'currency': 'usd',
                'product_data': {
                    'name': description,
                },
                'unit_amount': int(amount * 100),
            },
            'quantity': 1,
        }],
        mode='payment',
        success_url=success_url,
        cancel_url=cancel_url,
    )
    return session.url

async def handle_contract_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å üò™":
        await send_welcome(update, context)
    else:
        amount = context.user_data.get('amount')
        phone = context.user_data.get('phone')
        if amount is None:
            await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É –æ–ø–ª–∞—Ç–∏.")
            return
        
        logger.info(f"–í–≤–µ–¥–µ–Ω–∞ —Å—É–º–∞ –¥–ª—è –æ–ø–ª–∞—Ç–∏: {amount}")
        
        try:
            payment_link_1 = create_payment_link(float(amount) * 0.5, "–ü–µ—Ä–µ–¥–ø–ª–∞—Ç–∞ –∑–∞ —Ä–æ–∑—Ä–æ–±–∫—É –±–æ—Ç–∞")
            payment_link_2 = create_payment_link(float(amount) * 0.5, "–ó–∞–ª–∏—à–æ–∫ –∑–∞ —Ä–æ–∑—Ä–æ–±–∫—É –±–æ—Ç–∞")

            payment_message = (
                f"üí≥ **–û–ø–ª–∞—Ç–∏—Ç–∏ –ø–µ—Ä—à—É —á–∞—Å—Ç–∏–Ω—É**: [–¢–∏—Ü]({payment_link_1})\n"
                f"üí≥ **–û–ø–ª–∞—Ç–∏—Ç–∏ –¥—Ä—É–≥—É —á–∞—Å—Ç–∏–Ω—É**: [–¢–∏—Ü]({payment_link_2})"
            )
            await update.message.reply_text(payment_message, parse_mode="Markdown")
            
            context.user_data['payment_link_1'] = payment_link_1
            context.user_data['payment_link_2'] = payment_link_2
            
            order_details = f"–†–æ–∑—Ä–æ–±–∫–∞ –±–æ—Ç–∞ –Ω–∞ —Å—É–º—É {amount} {context.user_data['currency']}"
            add_order(user_id=update.effective_user.id, username=update.effective_user.username, order_details=order_details, amount=float(amount), status="pending", currency=context.user_data['currency'])
            logger.info(f"–ö–æ–Ω—Ç—Ä–∞–∫—Ç –¥–æ–¥–∞–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.username} (ID: {update.effective_user.id})")
            
        except Exception as e:
            await update.message.reply_text(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏: {str(e)}")
            await send_welcome(update, context)

async def check_payment_status(context, payment_link):
    if not payment_link:
        logger.error("–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—î –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ.")
        return False

    try:
        session_id = payment_link.split('/')[5]
    except IndexError as e:
        logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥—Ç–∏ ID —Å–µ—Å—ñ—ó –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment_link}. –ü–æ–º–∏–ª–∫–∞: {e}")
        return False
    
    try:
        session = stripe.checkout.Session.retrieve(session_id)
        if session.payment_status == 'paid':
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å–µ—Å—ñ—ó {session_id}: {session.payment_status}")
            return True
        else:
            logger.info(f"–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç–∏ –¥–ª—è —Å–µ—Å—ñ—ó {session_id}: {session.payment_status}")
    except stripe.error.StripeError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ Stripe: {str(e)}")
    
    return False

async def handle_remaining_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payment_link_1 = context.user_data.get('payment_link_1')
    payment_link_2 = context.user_data.get('payment_link_2')

    if await check_payment_status(context, payment_link_1):
        await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –ü–µ—Ä—à–∞ —á–∞—Å—Ç–∏–Ω–∞ –æ–ø–ª–∞—Ç–∏ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ ü•≥")
    elif await check_payment_status(context, payment_link_2):
        await update.message.reply_text("–í—ñ—Ç–∞—î–º–æ! –î—Ä—É–≥–∞ —á–∞—Å—Ç–∏–Ω–∞ –æ–ø–ª–∞—Ç–∏ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ ü•≥")
    else:
        await update.message.reply_text("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ–π—à–ª–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
        return

    keyboard = [["–û–ø–ª–∞—Ç–∏—Ç–∏ –¥—Ä—É–≥—É —á–∞—Å—Ç–∏–Ω—É üí∞"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –¥—Ä—É–≥—É —á–∞—Å—Ç–∏–Ω—É.", reply_markup=reply_markup)

async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    message_text = update.message.text
    username = update.effective_user.username or update.effective_user.first_name

    try:
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username}: {message_text}"
        )
        logger.info(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ @{username} (ID: {user_id}): {message_text} —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É.")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—É: {str(e)}")