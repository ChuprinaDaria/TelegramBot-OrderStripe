import os
import sys
import logging
import stripe
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters
from dotenv import load_dotenv

# –î–æ–¥–∞–π—Ç–µ —à–ª—è—Ö –¥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó –∑ —Ñ–∞–π–ª–∞–º–∏ –¥–æ PYTHONPATH
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from bot_handlers import (
    send_welcome,
    handle_main_menu,
    handle_contact,
    handle_form_payment,
    handle_payment_amount,
    handle_contract_confirmation,
    handle_remaining_payment,
    handle_user_message
)
from db_new import init_db, add_user, get_user

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ —Ñ–∞–π–ª—É zminni.env
env_path = os.path.join(os.path.dirname(__file__), 'zminni.env')
load_dotenv(env_path)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —Ñ–∞–π–ª –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è
if os.path.exists(env_path):
    print(f"–§–∞–π–ª {env_path} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏–π —É—Å–ø—ñ—à–Ω–æ.")
else:
    print(f"–§–∞–π–ª {env_path} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
ADMIN_USER_ID = os.getenv("ADMIN_USER_ID")
STRIPE_API_KEY = os.getenv("STRIPE_API_KEY")
SUCCESS_URL = os.getenv("SUCCESS_URL")
CANCEL_URL = os.getenv("CANCEL_URL")

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –Ω–∞–ª–∞–≥–æ–¥–∂–µ–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(levellevel)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞:")
logger.info(f"TELEGRAM_BOT_TOKEN: {TOKEN[:5]}...")  # –°–∫–æ—Ä–æ—á–µ–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏
logger.info(f"ADMIN_USER_ID: {ADMIN_USER_ID}")
logger.info(f"STRIPE_API_KEY: {STRIPE_API_KEY[:5]}...")  # –°–∫–æ—Ä–æ—á–µ–Ω–Ω—è –¥–ª—è –±–µ–∑–ø–µ–∫–∏
logger.info(f"SUCCESS_URL: {SUCCESS_URL}")
logger.info(f"CANCEL_URL: {CANCEL_URL}")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ
if not TOKEN:
    logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª zminni.env.")
if not STRIPE_API_KEY:
    logger.error("STRIPE_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª zminni.env.")
if not SUCCESS_URL:
    logger.error("SUCCESS_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª zminni.env.")
if not CANCEL_URL:
    logger.error("CANCEL_URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª zminni.env.")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
init_db()

async def main():
    try:
        if not TOKEN:
            logger.error("TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
            return
        if not STRIPE_API_KEY:
            logger.error("STRIPE_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏...")
            return

        application = ApplicationBuilder().token(TOKEN).build()

        # –û—á–∏—Å—Ç–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤
        await application.bot.delete_webhook()
        logger.info("–í–µ–±—Ö—É–∫ –æ—á–∏—â–µ–Ω–æ")

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
        application.add_handler(CommandHandler("start", send_welcome))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("–°—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –æ–ø–ª–∞—Ç—É üìë"), handle_form_payment))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^[0-9]+$"), handle_payment_amount))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é üëç"), handle_contract_confirmation))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("–û–ø–ª–∞—Ç–∏—Ç–∏ –¥—Ä—É–≥—É —á–∞—Å—Ç–∏–Ω—É üí∞"), handle_remaining_payment))
        application.add_handler(MessageHandler(filters.TEXT & filters.Regex("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å üò™"), send_welcome))
        application.add_handler(MessageHandler(filters.CONTACT, handle_contact))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_message))
        logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ–¥–∞–Ω—ñ")

        # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—é—á–∞ API Stripe
        stripe.api_key = STRIPE_API_KEY

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        add_user(1, "test_user", "1234567890")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π: {get_user(1)}")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        await application.run_polling()
    except Exception as e:
        logger.error(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {str(e)}")

if __name__ == '__main__':
    import asyncio
    import nest_asyncio

    nest_asyncio.apply()
    asyncio.run(main())